// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invite {
  id String @id @default(uuid())
  token String @unique
  expiresAt DateTime
  invitedBy User @relation("CreatedInvites", fields: [invitedById], references: [id])
  invitedById String
  acceptedBy User? @relation("AcceptedInvites", fields: [acceptedById], references: [id])
  acceptedById String?

  createdAt DateTime @default(now())
}

model User {
  id  String  @id @default(uuid())
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  password String?
  accounts Account[]
  sessions Session[]
  reviews Review[]
  createdInvites Invite[] @relation("CreatedInvites")
  acceptedInvites Invite[] @relation("AcceptedInvites")
  createdCheckIn CheckIn[]
  checkIn CheckInParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model Account {
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token String
  expires DateTime

  @@id([identifier, token])
}

model Buteco {
  id  String  @id @default(uuid())
  name String
  address String
  latitude Float
  longitude Float
  image_url String
  logo_url String
  rating Decimal @default(0)
  food Decimal @default(0)
  drink Decimal @default(0)
  ambiance Decimal @default(0)
  service Decimal @default(0)
  price Decimal @default(0)
  reviews Review[]
  calendar Calendar[]
  checkIn CheckIn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CheckIn {
  id String @id @default(uuid())
  buteco Buteco @relation(fields: [butecoId], references: [id])
  butecoId String
  createdBy User @relation(fields: [createdById], references: [id])
  createdById String
  participants CheckInParticipant[]
  review Review[]

  createdAt DateTime @default(now())
}

model CheckInParticipant {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  checkIn   CheckIn  @relation(fields: [checkInId], references: [id])
  checkInId String
  hasEvaluated Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([userId, checkInId]) // Um usuário não pode ser marcado duas vezes no mesmo check-in
}

model Review {
  id  String  @id @default(uuid())
  user_id String
  buteco_id String
  food Int
  drink Int
  service Int
  ambiance Int
  price Int
  rating Decimal
  checkInId String?
  checkIn CheckIn? @relation(fields: [checkInId], references: [id])
  user User @relation(fields: [user_id], references: [id])
  buteco Buteco @relation(fields: [buteco_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([user_id, buteco_id])
}

model Calendar {
  id String @id @default(uuid())
  date DateTime
  buteco Buteco @relation(fields: [buteco_id], references: [id])
  buteco_id String
}
