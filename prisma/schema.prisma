generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invite {
  id           String   @id @default(uuid())
  token        String   @unique
  expiresAt    DateTime
  invitedById  String?
  acceptedById String?
  createdAt    DateTime @default(now())
  acceptedBy   User?    @relation("AcceptedInvites", fields: [acceptedById], references: [id])
  invitedBy    User?    @relation("CreatedInvites", fields: [invitedById], references: [id])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id              String               @id @default(uuid())
  name            String?
  email           String               @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role                 @default(USER)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  accounts        Account[]
  createdCheckIn  CheckIn[]
  checkIn         CheckInParticipant[]
  acceptedInvites Invite[]             @relation("AcceptedInvites")
  createdInvites  Invite[]             @relation("CreatedInvites")
  reviews         Review[]
  sessions        Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Buteco {
  id              String     @id @default(uuid())
  name            String
  address         String
  latitude        Float
  longitude       Float
  image_url       String
  logo_url        String
  rating          Float      @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  ambiance        Float      @default(0)
  drink           Float      @default(0)
  food            Float      @default(0)
  price           Float      @default(0)
  service         Float      @default(0)
  firstCheckInAt  DateTime?
  calendar        Calendar[]
  checkIn         CheckIn[]
  reviews         Review[]
}

model CheckIn {
  id           String               @id @default(uuid())
  butecoId     String
  createdById  String
  createdAt    DateTime             @default(now())
  buteco       Buteco               @relation(fields: [butecoId], references: [id], onDelete: Cascade)
  createdBy    User                 @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants CheckInParticipant[]
  review       Review[]
}

model CheckInParticipant {
  id           String   @id @default(uuid())
  userId       String
  checkInId    String
  hasEvaluated Boolean  @default(false)
  createdAt    DateTime @default(now())
  checkIn      CheckIn  @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, checkInId])
}

model Review {
  id        String   @id @default(uuid())
  user_id   String
  buteco_id String
  food      Int
  drink     Int
  service   Int
  ambiance  Int
  price     Int
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  checkInId String?
  buteco    Buteco   @relation(fields: [buteco_id], references: [id], onDelete: Cascade)
  checkIn   CheckIn? @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, buteco_id])
}

model Calendar {
  id        String   @id @default(uuid())
  date      DateTime
  buteco_id String?
  buteco    Buteco?   @relation(fields: [buteco_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
